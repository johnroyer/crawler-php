<?php

namespace Tests\Unit;

use Zeroplex\Crawler\UrlQueue\ArrayQueue;

class ArrayQueueTest extends \Codeception\Test\Unit
{
    protected ?ArrayQueue $queue;

    protected function _before()
    {
        parent::_before();
        $this->queue = new ArrayQueue();
    }

    protected function _after()
    {
        $this->queue = null;
        parent::_after(); // TODO: Change the autogenerated stub
    }

    public function testIsEmptyAfterInitialized()
    {
        $this->assertSame(
            true,
            $this->queue->isEmpty(),
        );
    }

    public function testPushItemIntoQueue()
    {
        $this->queue->push('test');

        $this->assertSame(
            false,
            $this->queue->isEmpty(),
        );
    }

    public function testPopItemFromQueue()
    {
        $this->queue->push('1');

        $this->assertSame(
            '1',
            $this->queue->pop(),
        );
    }

    public function testItemPopFirstItemFromQueue()
    {
        $this->queue->push('1');
        $this->queue->push('2');
        $this->queue->push('3');

        $this->assertSame(
            '1',
            $this->queue->pop(),
        );
    }

    public function testQueueLengthGetter()
    {
        $this->assertSame(
            0,
            $this->queue->getLength(),
        );

        $this->queue->push('1');

        $this->assertSame(
            1,
            $this->queue->getLength(),
        );
    }

    public function testToArray()
    {
        $this->queue->push('a');
        $this->queue->push('b');

        $this->assertSame(
            ['a', 'b'],
            $this->queue->toArray(),
        );

        return $this->queue;
    }

    /**
     * @depends testToArray
     */
    public function testExists($queue)
    {
        $this->assertSame(
            true,
            $queue->isExists('a'),
        );
    }
}
